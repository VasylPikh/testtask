import os
import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import pandas as pd

TOKEN = "7848695900:AAHqxq3UJeazVnziwkPG3unFIaYZ_BKVeLA"
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
file_path = "LoyaltyHotelPrograms.xlsx"
try:
    df = pd.read_excel(file_path)
except FileNotFoundError:
    print(f"–§–∞–π–ª {file_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    exit(1)
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
    exit(1)

weights = {
    "Price Segment": 5,
    "Style/Vibe": 5,
    "Loyalty Program's Benefits": 5,
    "Hotels Benefits": 4,
    "What's near Hotels": 4,
    "Country": 5,
    "Rating": 4
}

user_data = {}

def get_best_loyalty_program(user_answers):
    def calculate_score(row):
        score = 0
        for key, weight in weights.items():
            if key in user_answers and str(user_answers[key]).lower() in str(row[key]).lower():
                score += weight
        return score

    df["Score"] = df.apply(calculate_score, axis=1)
    columns = ["Loyalty Program", "Hotel Brand"] + (["Website"] if "Website" in df.columns else [])
    top_programs = df.sort_values(by="Score", ascending=False).head(8)[columns]
    return top_programs

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π (–Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ–π –º–æ–≤—ñ)
price_segment_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ï–∫–æ–Ω–æ–º"), KeyboardButton(text="–°–µ—Ä–µ–¥–Ω—ñ–π")],
        [KeyboardButton(text="–ü—Ä–µ–º—ñ—É–º"), KeyboardButton(text="–õ—é–∫—Å")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

style_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ú–æ–¥–µ—Ä–Ω"), KeyboardButton(text="–ó–∞—Ç–∏—à–Ω–∏–π"), KeyboardButton(text="–ï–∫–æ")],
        [KeyboardButton(text="–õ—é–∫—Å"), KeyboardButton(text="–ú–æ–ª–æ–¥—ñ–∂–Ω–∏–π"), KeyboardButton(text="–¢–µ–º–∞—Ç–∏—á–Ω–∏–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

benefits_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ó–Ω–∏–∂–∫–∏"), KeyboardButton(text="–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ –Ω–æ—á—ñ")],
        [KeyboardButton(text="–®–≤–∏–¥–∫—ñ –±–∞–ª–∏"), KeyboardButton(text="–ï–ª—ñ—Ç–Ω–∏–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="–ü–æ–¥–∞—Ä—É–Ω–∫–∏")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

hotel_benefits_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Wi-Fi"), KeyboardButton(text="–ë–∞—Å–µ–π–Ω")],
        [KeyboardButton(text="–†–µ—Å—Ç–æ—Ä–∞–Ω"), KeyboardButton(text="–°–ø–æ—Ä—Ç–∑–∞–ª")],
        [KeyboardButton(text="–°—ñ–º–µ–π–Ω–∏–π")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

location_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–¶–µ–Ω—Ç—Ä –º—ñ—Å—Ç–∞"), KeyboardButton(text="–ê–µ—Ä–æ–ø–æ—Ä—Ç")],
        [KeyboardButton(text="–ë—ñ–∑–Ω–µ—Å-–∑–æ–Ω–∞"), KeyboardButton(text="–ü—Ä–∏—Ä–æ–¥–∞")],
        [KeyboardButton(text="–®–æ–ø—ñ–Ω–≥")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

country_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–°–®–ê"), KeyboardButton(text="–Ü—Å–ø–∞–Ω—ñ—è")],
        [KeyboardButton(text="–û–ê–ï"), KeyboardButton(text="–¢–∞—ó–ª–∞–Ω–¥")],
        [KeyboardButton(text="–Ü–Ω—à–µ")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

rating_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="60"), KeyboardButton(text="70")],
        [KeyboardButton(text="80"), KeyboardButton(text="90")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(Command(commands=["start"]))
async def start(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {}
    await message.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ –¥–ª—è –≥–æ—Ç–µ–ª—ñ–≤. –Ø–∫–∏–π —É —Ç–µ–±–µ –±—é–¥–∂–µ—Ç? –û–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç:", reply_markup=price_segment_kb)

@router.message()
async def handle_answers(message: types.Message):
    user_id = message.from_user.id
    text = message.text.lower()

    if user_id not in user_data:
        user_data[user_id] = {}

    if "Price Segment" not in user_data[user_id]:
        user_data[user_id]["Price Segment"] = text.capitalize()
        await message.reply(f"–ß—É–¥–æ–≤–æ, {text.capitalize()} ‚Äî —Ö–æ—Ä–æ—à–∏–π –≤–∏–±—ñ—Ä. –Ø–∫–∏–π —Å—Ç–∏–ª—å –≥–æ—Ç–µ–ª—ñ–≤ —Ç–æ–±—ñ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è? –û–±–µ—Ä–∏:", reply_markup=style_kb)
    elif "Style/Vibe" not in user_data[user_id]:
        user_data[user_id]["Style/Vibe"] = text
        await message.reply(f"{text.capitalize()} ‚Äî —Ü—ñ–∫–∞–≤–æ! –Ø–∫—ñ –±–æ–Ω—É—Å–∏ –≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω—ñ? –í–∏–±–∏—Ä–∞–π:", reply_markup=benefits_kb)
    elif "Loyalty Program's Benefits" not in user_data[user_id]:
        user_data[user_id]["Loyalty Program's Benefits"] = text
        await message.reply(f"{text.capitalize()} ‚Äî –∑—Ä–æ–∑—É–º—ñ–ª–æ. –©–æ –¥–ª—è —Ç–µ–±–µ –≤–∞–∂–ª–∏–≤–æ –≤ –≥–æ—Ç–µ–ª—ñ? –û–±–µ—Ä–∏:", reply_markup=hotel_benefits_kb)
    elif "Hotels Benefits" not in user_data[user_id]:
        user_data[user_id]["Hotels Benefits"] = text
        await message.reply(f"{text.capitalize()} ‚Äî –≥–∞—Ä–Ω–æ. –©–æ –º–∞—î –±—É—Ç–∏ –ø–æ—Ä—É—á —ñ–∑ –≥–æ—Ç–µ–ª–µ–º? –í–∏–±–∏—Ä–∞–π:", reply_markup=location_kb)
    elif "What's near Hotels" not in user_data[user_id]:
        user_data[user_id]["What's near Hotels"] = text
        await message.reply(f"{text.capitalize()} ‚Äî —á—É–¥–æ–≤–æ. –í —è–∫—ñ–π –∫—Ä–∞—ó–Ω—ñ –ø–ª–∞–Ω—É—î—à –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏? –û–±–µ—Ä–∏:", reply_markup=country_kb)
    elif "Country" not in user_data[user_id]:
        user_data[user_id]["Country"] = text if text != "—ñ–Ω—à–µ" else "–ë—É–¥—å-—è–∫–∞"
        await message.reply(f"{text.capitalize()} ‚Äî –ø—Ä–∏—î–º–Ω–µ –º—ñ—Å—Ü–µ. –Ø–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–±—ñ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å? –í–∫–∞–∂–∏ —á–∏—Å–ª–æ:", reply_markup=rating_kb)
    elif "Rating" not in user_data[user_id]:
        try:
            rating = int(text)
            user_data[user_id]["Rating"] = rating
            results = get_best_loyalty_program(user_data[user_id])
            reply_text = "–û—Å—å –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º –ª–æ—è–ª—å–Ω–æ—Å—Ç—ñ, —è–∫—ñ –º–æ–∂—É—Ç—å —Ç–æ–±—ñ –ø—ñ–¥—ñ–π—Ç–∏:\n"
            for _, row in results.iterrows():
                program = row["Loyalty Program"]
                brand = row["Hotel Brand"]
                website = row.get("Website", None)
                if website:
                    reply_text += f"üè® [{brand} - {program}]({website})\n"
                else:
                    reply_text += f"üè® {brand} - {program}\n"
            reply_text += "\n–°–ø–æ–¥—ñ–≤–∞—é—Å—è, —Ç–æ–±—ñ —Å–ø–æ–¥–æ–±–∞—î—Ç—å—Å—è! –•–æ—á–µ—à —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑? –ù–∞–ø–∏—à–∏ /start."
            await message.reply(reply_text, parse_mode="Markdown")
            user_data.pop(user_id)
        except ValueError:
            await message.reply("–†–µ–π—Ç–∏–Ω–≥ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:", reply_markup=rating_kb)

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())